package com.ninhongo.interceptor;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import com.ninhongo.services.NinhongoService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class RateLimitInterceptor implements HandlerInterceptor {
	
	private final ConcurrentMap<String, RateLimiter> limiters = new ConcurrentHashMap<>();
	
	private static final Logger log = LoggerFactory.getLogger(RateLimitInterceptor.class);
	
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		
		//Obtenemos el ID del cliente (Se obtiene la IP)
        String clientId = getClientId(request);
        
        log.info("Cliente detectado {}",clientId);
        
        RateLimiter rateLimiter = limiters.computeIfAbsent(clientId, k -> new RateLimiter(20, TimeUnit.MINUTES));
        if (!rateLimiter.allowRequest()) {
            response.setStatus(429);
            response.getWriter().write("Too many requests. Please try again later.");
            return false;
        }
        return true;
    }

    private String getClientId(HttpServletRequest request) {    	
        return request.getRemoteAddr();
    }
	
}